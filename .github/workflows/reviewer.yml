name: Review and Merge SQL Scripts

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/sql_script/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review_sql_scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate diffing

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          pip install PyJWT python-jose cryptography

      - name: Generate GitHub App JWT Token
        id: generate_jwt
        run: |
          # Run Python script to generate JWT token and capture the output
          python .github/utils/generate_jwt.py
          
          # Set the JWT token as an environment variable for the next steps
          echo "JWT_TOKEN=$(cat .github/secrets/jwt_token.txt)" >> $GITHUB_ENV
          
          # Print the JWT token to the workflow logs
          echo "JWT Token: ${{ env.JWT_TOKEN }}"

      - name: Check for CREATE statements in SQL files
        id: check_sql_changes
        run: |
          # Use explicit base and head SHAs for diffing
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.github/sql_script/.*\.(sql|txt)$' || true)

          echo "Changed SQL files: $CHANGED_FILES"

          # Initialize environment variable for script evaluation
          CREATE_STATEMENT_FOUND=false

          if [ -n "$CHANGED_FILES" ]; then
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                echo "Analyzing file: $file"

                # Remove single-line and multiline comments, then check for CREATE statements
                SQL_CONTENT=$(sed -E '/^\s*--/d' "$file" | sed -E ':a;N;$!ba;s/\s*\/\*.*?\*\///g')
                if echo "$SQL_CONTENT" | grep -iq "CREATE"; then
                  CREATE_STATEMENT_FOUND=true
                  echo "CREATE statement found in $file"
                  break
                fi
              fi
            done
          fi

          # Set the appropriate environment variable based on whether a CREATE statement was found
          if [ "$CREATE_STATEMENT_FOUND" = true ]; then
            echo "create_script=true" >> "$GITHUB_ENV"
          else
            echo "create_script=false" >> "$GITHUB_ENV"
          fi

      - name: Auto-approve PR if no CREATE statements found
        if: env.create_script == 'false'  # Only for PRs with no CREATE statements
        run: |
          echo "No CREATE statement found, auto-approving PR."
          # Use GitHub CLI to approve the PR
          gh pr review ${{ github.event.pull_request.number }} --approve
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log message and assign reviewer
        run: |
          echo "create_script value: ${{ env.create_script }}"
          if [ "${{ env.create_script }}" = "true" ]; then
            echo "✅ CREATE statement detected. Reviewer required: Notyou1231"
            # Add reviewer to PR using GitHub CLI
            gh pr edit ${{ github.event.pull_request.number }} --add-reviewer Notyou1231 || true
          else
            echo "ℹ️ No CREATE statement found. No reviewer required."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify if CREATE script is missing reviewer
        if: failure() && env.create_script == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "⚠️ No reviewer was assigned. Please assign a reviewer manually."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Review Notification
        if: success() && env.create_script == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "✅ Reviewer has been assigned and PR is pending approval before merge."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
