name: Execute SQL Scripts and Assign Reviewer

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/sql_script/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  execute_sql_scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate diffing

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Debug PR Information
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Base Branch: ${{ github.base_ref }}"
          echo "Head Branch: ${{ github.head_ref }}"
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "Pull Request Number: ${{ github.event.pull_request.number }}"

      - name: Check for SQL script changes
        id: check_sql_changes
        run: |
          # Use explicit base and head SHAs for diffing
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.github/sql_script/.*\.(sql|txt)$' || true)
          
          echo "Changed SQL files: $CHANGED_FILES"
          
          # Check if changed files are not empty
          if [ -n "$CHANGED_FILES" ]; then
            CREATE_SCRIPT_FOUND=false
            
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                # Read the content of the file and check for 'CREATE' statement
                if grep -iq "CREATE" "$file"; then
                  CREATE_SCRIPT_FOUND=true
                  echo "CREATE statement found in $file"
                  break
                fi
              fi
            done
            
            if [ "$CREATE_SCRIPT_FOUND" = true ]; then
              echo "create_script=true" >> "$GITHUB_ENV"
            else
              echo "create_script=false" >> "$GITHUB_ENV"
            fi
          else
            echo "No SQL files were changed in this pull request"
            echo "create_script=false" >> "$GITHUB_ENV"
          fi

      - name: Assign reviewer
        if: env.create_script == 'true'
        run: |
          # Attempt to add reviewer using GitHub CLI
          gh pr edit ${{ github.event.pull_request.number }} --add-reviewer Notyou1231 || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment if reviewer assignment fails
        if: failure()
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "⚠️ Automated Reviewer Assignment Failed. Please manually assign a reviewer."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Execute SQL Scripts
        if: success()
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          # Use explicit base and head SHAs for diffing
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.github/sql_script/.*\.(sql|txt)$' || true)
          
          SCRIPT_EXECUTION_FAILED=false
          
          if [ -n "$CHANGED_FILES" ]; then
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                echo "Processing changed file: $file"
                python .github/scripts/execute_snowflake_script.py "$file" || SCRIPT_EXECUTION_FAILED=true
              fi
            done
            
            if [ "$SCRIPT_EXECUTION_FAILED" = true ]; then
              echo "::error::SQL Script Execution Failed"
              exit 1
            fi
          else
            echo "No SQL files were changed in this push"
          fi

      - name: Notify on SQL Script Execution Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ SQL Script Execution Failed. Please review the workflow logs for details.'
            })

      - name: Success Notification
        if: success()
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "✅ SQL Scripts processed successfully. Ready for review!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

